<html><head><script src="../CssRequirements/scriptFile.js"></script><link rel ="stylesheet"href = "../CssRequirements/styleFile.css"></head><body><h3>XmlElement.cpp.htm</h3><hr/><div class ="indent"><h4>Dependencies:</h4><br><a href =../ResultFolder/CodePublisher.h.htm>CodePublisher.h</a><br><br><a href =../ResultFolder/CppProperties.h.htm>CppProperties.h</a><br><br><a href =../ResultFolder/DepAnal.h.htm>DepAnal.h</a><br><br><a href =../ResultFolder/DependencyAnalysis.h.htm>DependencyAnalysis.h</a><br><br><a href =../ResultFolder/Executive.cpp.htm>Executive.cpp</a><br><br><a href =../ResultFolder/Executive.h.htm>Executive.h</a><br><br><a href =../ResultFolder/NoSqlDb.h.htm>NoSqlDb.h</a><br><br><a href =../ResultFolder/TypeTable.h.htm>TypeTable.h</a><br><br><a href =../ResultFolder/XmlDocument.h.htm>XmlDocument.h</a><br><br><a href =../ResultFolder/XmlElement.h.htm>XmlElement.h</a><br></div><hr/><pre>///////////////////////////////////////////////////////////////////
// XmlElement.cpp - define XML Element types                     //
// ver 1.4                                                       //
// Application: Help for CSE687 Pr#2, Spring 2015                //
// Platform:    Dell XPS 2720, Win 8.1 Pro, Visual Studio 2013   //
// Author:      Jim Fawcett, CST 4-187, 443-3948                 //
//              jfawcett@twcny.rr.com                            //
///////////////////////////////////////////////////////////////////

#include "XmlElement.h"
#include &ltiostream&gt

using namespace XmlProcessing;

size_t AbstractXmlElement::count = 0;
size_t AbstractXmlElement::tabSize = 2;

//----&lt factory for doc elements &gt----------------------------------------

std::shared_ptr&ltAbstractXmlElement&gt XmlProcessing::makeDocElement(std::shared_ptr&ltAbstractXmlElement&gt pRoot)
<a href = javascript:toggle_visibility('0');>{</a><div id=0>
  std::shared_ptr&ltAbstractXmlElement&gt ptr(new DocElement(pRoot));
  return ptr;
}</div>

//----&lt factory for tagged elements &gt----------------------------------------

std::shared_ptr&ltAbstractXmlElement&gt XmlProcessing::makeTaggedElement(const std::string& tag)
<a href = javascript:toggle_visibility('1');>{</a><div id=1>
  std::shared_ptr&ltAbstractXmlElement&gt ptr(new TaggedElement(tag));
  return ptr;
}</div>
//----&lt factory for text elements &gt------------------------------------------

std::shared_ptr&ltAbstractXmlElement&gt XmlProcessing::makeTextElement(const std::string& text)
<a href = javascript:toggle_visibility('2');>{</a><div id=2>
  std::shared_ptr&ltAbstractXmlElement&gt ptr(new TextElement(text));
  return ptr;
}</div>
//----&lt factory for comment elements &gt---------------------------------------

std::shared_ptr&ltAbstractXmlElement&gt XmlProcessing::makeCommentElement(const std::string& text)
<a href = javascript:toggle_visibility('3');>{</a><div id=3>
  std::shared_ptr&ltAbstractXmlElement&gt ptr(new CommentElement(text));
  return ptr;
}</div>
//----&lt factory for processing instruction elements &gt------------------------

std::shared_ptr&ltAbstractXmlElement&gt XmlProcessing::makeProcInstrElement(const std::string& text)
<a href = javascript:toggle_visibility('4');>{</a><div id=4>
  std::shared_ptr&ltAbstractXmlElement&gt ptr(new ProcInstrElement(text));
  return ptr;
}</div>
//----&lt factory for XML Declaration elements &gt-------------------------------

std::shared_ptr&ltAbstractXmlElement&gt XmlProcessing::makeXmlDeclarElement()
<a href = javascript:toggle_visibility('5');>{</a><div id=5>
  std::shared_ptr&ltAbstractXmlElement&gt ptr(new XmlDeclarElement());
  return ptr;
}</div>
//----&lt doc element constructor and destructor &gt-----------------------------

DocElement::DocElement(std::shared_ptr&ltAbstractXmlElement&gt pRoot) 
<a href = javascript:toggle_visibility('6');>{</a><div id=6>
  std::shared_ptr&ltAbstractXmlElement&gt pDecl = makeXmlDeclarElement();
  pDecl-&gtaddAttrib("version", "1.0");
  children_.push_back(pDecl);
  if (pRoot != nullptr)
    children_.push_back(pRoot);
}</div>
//----&lt private helper for DocElement::addChild(...) &gt-----------------------

bool DocElement::hasXmlRoot()
<a href = javascript:toggle_visibility('7');>{</a><div id=7>
  for (auto pElement : children_)
  <a href = javascript:toggle_visibility('8');>{</a><div id=8>
    if (dynamic_cast&ltTaggedElement*&gt(pElement.get()) != nullptr)
      return true;
  }</div>
  return false;
}</div>
//----&lt add only one child to doc element using pointer to child &gt-----------

bool DocElement::addChild(std::shared_ptr&ltAbstractXmlElement&gt pChild)
<a href = javascript:toggle_visibility('9');>{</a><div id=9>
  // don't add TextElements
  TextElement* pTxEl = dynamic_cast&ltTextElement*&gt(pChild.get());
  if (pTxEl != 0)  // don't add text elements to DocElement
    return false;

  // don't add another DocElement
  DocElement* pDcEl = dynamic_cast&ltDocElement*&gt(pChild.get());
  if (pDcEl != 0)  // don't add text elements to DocElement
    return false;

  // add ProcInstrElements and CommentElements 
  TaggedElement* te = dynamic_cast&ltTaggedElement*&gt(pChild.get());
  if (te == nullptr) // is not a TaggedElement
  <a href = javascript:toggle_visibility('10');>{</a><div id=10>
    children_.push_back(pChild);
    return true;
  }</div>

  // add only one TaggedElement
  if (!hasXmlRoot())
  <a href = javascript:toggle_visibility('11');>{</a><div id=11>
    children_.push_back(pChild);
    return true;
  }</div>
  return false;
}</div>
//----&lt remove child from doc element using pointer to child &gt---------------

bool DocElement::removeChild(std::shared_ptr&ltAbstractXmlElement&gt pChild)
<a href = javascript:toggle_visibility('12');>{</a><div id=12>
  auto iter = std::find(begin(children_), end(children_), pChild);
  if (iter != end(children_))
  <a href = javascript:toggle_visibility('13');>{</a><div id=13>
    children_.erase(iter);
    return true;
  }</div>
  return false;
}</div>
//----&lt return value = tag from doc element &gt-----------------------------

std::string DocElement::value() <a href = javascript:toggle_visibility('14');>{</a><div id=14> return std::string(""); }</div>

//----&lt generate xml string for tagged element &gt-----------------------------

std::string DocElement::toString()
<a href = javascript:toggle_visibility('15');>{</a><div id=15>
  std::string rtn;
  for (auto elem : children_)
    rtn += elem-&gttoString();
  return rtn;
}</div>
//----&lt add child to tagged element using pointer to child &gt-----------------

bool TaggedElement::addChild(std::shared_ptr&ltAbstractXmlElement&gt pChild)
<a href = javascript:toggle_visibility('16');>{</a><div id=16>
  children_.push_back(pChild);
  return true;
}</div>
//----&lt remove child from tagged element using pointer to child &gt------------

bool TaggedElement::removeChild(std::shared_ptr&ltAbstractXmlElement&gt pChild)
<a href = javascript:toggle_visibility('17');>{</a><div id=17>
  auto iter = std::find(begin(children_), end(children_), pChild);
  if (iter != end(children_))
  <a href = javascript:toggle_visibility('18');>{</a><div id=18>
    children_.erase(iter);
    return true;
  }</div>
  return false;
}</div>
//----&lt remove child from tagged element using child's value &gt---------------

bool TaggedElement::removeChild(const std::string& value)
<a href = javascript:toggle_visibility('19');>{</a><div id=19>
  for (auto iter = begin(children_); iter != end(children_); ++iter)
  <a href = javascript:toggle_visibility('20');>{</a><div id=20>
    if ((*iter)-&gtvalue() == value)
    <a href = javascript:toggle_visibility('21');>{</a><div id=21>
      children_.erase(iter);
      return true;
    }</div>
  }</div>
  return false;
}</div>
//----&lt add attribute to tagged element &gt------------------------------------

bool TaggedElement::addAttrib(const std::string& name, const std::string& value)
<a href = javascript:toggle_visibility('22');>{</a><div id=22>
  std::pair&ltstd::string, std::string&gt atPair(name, value);
  attribs_.push_back(atPair);
  return true;
}</div>
//----&lt remove attribute from tagged element &gt-------------------------------

bool TaggedElement::removeAttrib(const std::string& name)
<a href = javascript:toggle_visibility('23');>{</a><div id=23>
  for (auto iter = begin(attribs_); iter != end(attribs_); ++iter)
  <a href = javascript:toggle_visibility('24');>{</a><div id=24>
    if (iter-&gtfirst == name)
    <a href = javascript:toggle_visibility('25');>{</a><div id=25>
      attribs_.erase(iter);
      return true;
    }</div>
  }</div>
  return false;
}</div>
//----&lt return value = tag from tagged element &gt-----------------------------

std::string TaggedElement::value() <a href = javascript:toggle_visibility('26');>{</a><div id=26> return tag_; }</div>

//----&lt generate xml string for tagged element &gt-----------------------------

std::string TaggedElement::toString()
<a href = javascript:toggle_visibility('27');>{</a><div id=27>
  std::string spacer(tabSize*++count, ' ');
  std::string xml = "\n" + spacer + "&lt" + tag_;
  for (auto at : attribs_)
  <a href = javascript:toggle_visibility('28');>{</a><div id=28>
    xml += " ";
    xml += at.first;
    xml += "=\"";
    xml += at.second;
    xml += "\"";
  }</div>
  xml += "&gt";
  for (auto pChild : children_)
    xml += pChild-&gttoString();
  xml += "\n" + spacer + "&lt/" + tag_ + "&gt";
  --count;
  return xml;
}</div>
//----&lt generate xml string for text element &gt-------------------------------

std::string TextElement::toString()
<a href = javascript:toggle_visibility('29');>{</a><div id=29>
  std::string spacer(tabSize * ++count, ' ');
  std::string xml = "\n" + spacer + text_;
  --count;
  return xml;
}</div>
//----&lt add attribute to ProcInstElement &gt-----------------------------------

bool ProcInstrElement::addAttrib(const std::string& name, const std::string& value)
<a href = javascript:toggle_visibility('30');>{</a><div id=30>
  std::pair&ltstd::string, std::string&gt atPair(name, value);
  attribs_.push_back(atPair);
  return true;
}</div>
//----&lt remove attribute from ProcInstElement &gt------------------------------

bool ProcInstrElement::removeAttrib(const std::string& name)
<a href = javascript:toggle_visibility('31');>{</a><div id=31>
  for (auto iter = begin(attribs_); iter != end(attribs_); ++iter)
  <a href = javascript:toggle_visibility('32');>{</a><div id=32>
    if (iter-&gtfirst == name)
    <a href = javascript:toggle_visibility('33');>{</a><div id=33>
      attribs_.erase(iter);
      return true;
    }</div>
  }</div>
  return false;
}</div>
//----&lt generate xml string for text element &gt-------------------------------

std::string XmlDeclarElement::toString()
<a href = javascript:toggle_visibility('34');>{</a><div id=34>
  std::string spacer(tabSize * ++count, ' ');
  std::string xml = "\n" + spacer + "&lt?xml";
  for (auto at : attribs_)
  <a href = javascript:toggle_visibility('35');>{</a><div id=35>
    xml += " ";
    xml += at.first;
    xml += "=\"";
    xml += at.second;
    xml += "\"";
  }</div>
  xml += "&gt";
  --count;
  return xml;
}</div>
//----&lt add attribute to ProcInstElement &gt-----------------------------------

bool XmlDeclarElement::addAttrib(const std::string& name, const std::string& value)
<a href = javascript:toggle_visibility('36');>{</a><div id=36>
  std::pair&ltstd::string, std::string&gt atPair(name, value);
  attribs_.push_back(atPair);
  return true;
}</div>
//----&lt remove attribute from ProcInstElement &gt------------------------------

bool XmlDeclarElement::removeAttrib(const std::string& name)
<a href = javascript:toggle_visibility('37');>{</a><div id=37>
  for (auto iter = begin(attribs_); iter != end(attribs_); ++iter)
  <a href = javascript:toggle_visibility('38');>{</a><div id=38>
    if (iter-&gtfirst == name)
    <a href = javascript:toggle_visibility('39');>{</a><div id=39>
      attribs_.erase(iter);
      return true;
    }</div>
  }</div>
  return false;
}</div>
//----&lt helper function displays titles &gt------------------------------------

void XmlProcessing::title(const std::string& title, char underlineChar)
<a href = javascript:toggle_visibility('40');>{</a><div id=40>
  std::cout &lt&lt "\n  " &lt&lt title;
  std::cout &lt&lt "\n " &lt&lt std::string(title.size() + 2, underlineChar);
}</div>

//----&lt test stub &gt----------------------------------------------------------

#ifdef TEST_XMLELEMENT

int main()
<a href = javascript:toggle_visibility('41');>{</a><div id=41>
  title("Testing XmlElement Package", '=');
  std::cout &lt&lt "\n";

  using sPtr = std::shared_ptr &lt AbstractXmlElement &gt ;

  sPtr root = makeTaggedElement("root");
  root-&gtaddChild(makeTextElement("this is a test"));

  sPtr child = makeTaggedElement("child");
  child-&gtaddChild(makeTextElement("this is another test"));
  child-&gtaddAttrib("first", "test");
  root-&gtaddChild(child);

  sPtr docEl = makeDocElement(root);
  std::cout &lt&lt "  " &lt&lt docEl-&gttoString();
  std::cout &lt&lt "\n\n";
}</div>

#endif
</pre></body></html>